import { HttpMethod } from "../../types/common";
import { OperationRequestBody } from "./request-body";
import {
  OperationPathParameters,
  OperationQueryParameters,
} from "./request-parameters";

/**
 * Excludes the <pre>parameters</pre> property if no <pre>path</pre> or <pre>query</pre> exists.
 */
export type FetchOptions<Operation> = Omit<
  AllFetchOptions<Operation>,
  | (OperationRequestBody<Operation> extends never ? "body" : never)
  | (OperationPathParameters<Operation> extends never
      ? OperationQueryParameters<Operation> extends never
        ? "parameters"
        : never
      : never)
>;

/**
 * Options of the constructed <pre>fetch</pre> method.
 */
export type AllFetchOptions<Operation = never> = Omit<RequestInit, "body"> & {
  parameters: FetchParameters<Operation>;
  body: OperationRequestBody<Operation> | string;
};

/**
 * Type that describes the "paths" generated by openapi-typescript
 */
export type OpenapiPaths<Paths> = {
  [P in keyof Paths]: {
    [M in HttpMethod]?: unknown;
  };
};

/**
 * Extract available paths from openapi-typescript paths type.
 */
export type SubPaths<Paths, Method extends HttpMethod = HttpMethod> = {
  [K in keyof Paths]: Paths[K] extends Record<Method, any> ? K : never;
}[keyof Paths];

/**
 * Get the fetch parameters <pre>path<pre> and <pre>query</pre>, for a specified <i>Operation</i>
 */
export type FetchParameters<Operation> = [Operation] extends [never]
  ? { path?: Record<string, any>; query?: Record<string, any> }
  :
      | (OperationPathParameters<Operation> extends never
          ? never
          : { path: OperationPathParameters<Operation> })
      | (OperationQueryParameters<Operation> extends never
          ? never
          : { query: OperationQueryParameters<Operation> });
